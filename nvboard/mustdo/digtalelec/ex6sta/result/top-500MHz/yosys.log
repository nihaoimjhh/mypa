
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2024  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.44+20 (git sha1 5fb3c0b1d, clang++ 14.0.0-1ubuntu1.1 -fPIC -O3)

-- Executing script file `-' --
[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: /home/jinghanhui/verilogtest/mustdo/ex6sta/vsrc/top.v
Parsing SystemVerilog input from `/home/jinghanhui/verilogtest/mustdo/ex6sta/vsrc/top.v' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: /home/jinghanhui/yosys-sta/scripts/../nangate45/verilog/blackbox.v
Parsing Verilog input from `/home/jinghanhui/yosys-sta/scripts/../nangate45/verilog/blackbox.v' to AST representation.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /home/jinghanhui/yosys-sta/scripts/../nangate45/verilog/cells_clkgate.v
Parsing Verilog input from `/home/jinghanhui/yosys-sta/scripts/../nangate45/verilog/cells_clkgate.v' to AST representation.
Generating RTLIL representation for module `\OPENROAD_CLKGATE'.
Successfully finished Verilog frontend.

4. Executing SYNTH pass.

4.1. Executing HIERARCHY pass (managing design hierarchy).

4.1.1. Analyzing design hierarchy..
Top module:  \top

4.1.2. Analyzing design hierarchy..
Top module:  \top
Removing unused module `\OPENROAD_CLKGATE'.
Removed 1 unused modules.

4.2. Executing PROC pass (convert processes to netlists).

4.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 2 dead cases from process $proc$/home/jinghanhui/verilogtest/mustdo/ex6sta/vsrc/top.v:17$5 in module top.
Marked 2 switch rules as full_case in process $proc$/home/jinghanhui/verilogtest/mustdo/ex6sta/vsrc/top.v:17$5 in module top.
Marked 1 switch rules as full_case in process $proc$/home/jinghanhui/verilogtest/mustdo/ex6sta/vsrc/top.v:4$1 in module top.
Removed a total of 2 dead cases.

4.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 3 assignments to connections.

4.2.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\top.$proc$/home/jinghanhui/verilogtest/mustdo/ex6sta/vsrc/top.v:2$6'.
  Set init value: \x8 = 1'0

4.2.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \reset in `\top.$proc$/home/jinghanhui/verilogtest/mustdo/ex6sta/vsrc/top.v:4$1'.

4.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 2 switches.

4.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\top.$proc$/home/jinghanhui/verilogtest/mustdo/ex6sta/vsrc/top.v:2$6'.
Creating decoders for process `\top.$proc$/home/jinghanhui/verilogtest/mustdo/ex6sta/vsrc/top.v:17$5'.
     1/2: $1\hex_low[6:0]
     2/2: $1\hex_high[6:0]
Creating decoders for process `\top.$proc$/home/jinghanhui/verilogtest/mustdo/ex6sta/vsrc/top.v:4$1'.
     1/2: $0\out[7:0]
     2/2: $0\x8[0:0]

4.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\top.\hex_high' from process `\top.$proc$/home/jinghanhui/verilogtest/mustdo/ex6sta/vsrc/top.v:17$5'.
No latch inferred for signal `\top.\hex_low' from process `\top.$proc$/home/jinghanhui/verilogtest/mustdo/ex6sta/vsrc/top.v:17$5'.

4.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\top.\out' using process `\top.$proc$/home/jinghanhui/verilogtest/mustdo/ex6sta/vsrc/top.v:4$1'.
  created $adff cell `$procdff$17' with positive edge clock and positive level reset.
Creating register for signal `\top.\x8' using process `\top.$proc$/home/jinghanhui/verilogtest/mustdo/ex6sta/vsrc/top.v:4$1'.
  created $dff cell `$procdff$20' with positive edge clock.

4.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

4.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `top.$proc$/home/jinghanhui/verilogtest/mustdo/ex6sta/vsrc/top.v:2$6'.
Found and cleaned up 2 empty switches in `\top.$proc$/home/jinghanhui/verilogtest/mustdo/ex6sta/vsrc/top.v:17$5'.
Removing empty process `top.$proc$/home/jinghanhui/verilogtest/mustdo/ex6sta/vsrc/top.v:17$5'.
Removing empty process `top.$proc$/home/jinghanhui/verilogtest/mustdo/ex6sta/vsrc/top.v:4$1'.
Cleaned up 2 empty switches.

4.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

4.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

4.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 9 unused wires.
<suppressed ~1 debug messages>

4.5. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

4.6. Executing OPT pass (performing simple optimizations).

4.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

4.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

4.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

4.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

4.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

4.6.6. Executing OPT_DFF pass (perform DFF optimizations).

4.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

4.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

4.6.9. Finished OPT passes. (There is nothing left to do.)

4.7. Executing FSM pass (extract and optimize FSM).

4.7.1. Executing FSM_DETECT pass (finding FSMs in design).

4.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

4.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

4.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

4.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

4.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

4.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

4.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

4.8. Executing OPT pass (performing simple optimizations).

4.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

4.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

4.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

4.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

4.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

4.8.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$20 ($dff) from module top (D = $0\x8[0:0], Q = \x8).

4.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

4.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

4.8.9. Rerunning OPT passes. (Maybe there is more to do..)

4.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

4.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

4.8.13. Executing OPT_DFF pass (perform DFF optimizations).

4.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

4.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

4.8.16. Finished OPT passes. (There is nothing left to do.)

4.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 28 address bits (of 32) from memory init port top.$auto$mem.cc:328:emit$10 ($auto$proc_rom.cc:155:do_switch$8).
Removed top 28 address bits (of 32) from memory init port top.$auto$mem.cc:328:emit$14 ($auto$proc_rom.cc:155:do_switch$12).

4.10. Executing PEEPOPT pass (run peephole optimizers).

4.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

4.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  created 0 $alu and 0 $macc cells.

4.13. Executing SHARE pass (SAT-based resource sharing).

4.14. Executing OPT pass (performing simple optimizations).

4.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

4.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

4.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

4.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

4.14.6. Executing OPT_DFF pass (perform DFF optimizations).

4.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

4.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

4.14.9. Finished OPT passes. (There is nothing left to do.)

4.15. Executing MEMORY pass.

4.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

4.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

4.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

4.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

4.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `$auto$proc_rom.cc:155:do_switch$12'[0] in module `\top': no output FF found.
Checking read port `$auto$proc_rom.cc:155:do_switch$8'[0] in module `\top': no output FF found.
Checking read port address `$auto$proc_rom.cc:155:do_switch$12'[0] in module `\top': address FF has async set and/or reset, not supported.
Checking read port address `$auto$proc_rom.cc:155:do_switch$8'[0] in module `\top': address FF has async set and/or reset, not supported.

4.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

4.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

4.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

4.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

4.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

4.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

4.17. Executing OPT pass (performing simple optimizations).

4.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

4.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

4.17.3. Executing OPT_DFF pass (perform DFF optimizations).

4.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

4.17.5. Finished fast OPT passes.

4.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory $auto$proc_rom.cc:155:do_switch$12 in module \top:
  created 16 $dff cells and 0 static cells of width 7.
  read interface: 0 $dff and 15 $mux cells.
  write interface: 0 write mux blocks.
Mapping memory $auto$proc_rom.cc:155:do_switch$8 in module \top:
  created 16 $dff cells and 0 static cells of width 7.
  read interface: 0 $dff and 15 $mux cells.
  write interface: 0 write mux blocks.

4.19. Executing OPT pass (performing simple optimizations).

4.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

4.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

4.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

4.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    Consolidated identical input bits for $mux cell $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][3][6]$110:
      Old ports: A=7'0110001, B=7'1000010, Y=$memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][3]$a$90
      New ports: A=2'01, B=2'10, Y=$memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][3]$a$90 [1:0]
      New connections: $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][3]$a$90 [6:2] = { $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][3]$a$90 [1:0] $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][3]$a$90 [0] 2'00 }
    Consolidated identical input bits for $mux cell $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][3][5]$107:
      Old ports: A=7'0001000, B=7'1100000, Y=$memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][2]$b$88
      New ports: A=2'01, B=2'10, Y={ $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][2]$b$88 [5] $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][2]$b$88 [3] }
      New connections: { $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][2]$b$88 [6] $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][2]$b$88 [4] $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][2]$b$88 [2:0] } = { $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][2]$b$88 [5] 4'0000 }
    Consolidated identical input bits for $mux cell $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][3][4]$104:
      Old ports: A=7'0000000, B=7'0000100, Y=$memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][2]$a$87
      New ports: A=1'0, B=1'1, Y=$memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][2]$a$87 [2]
      New connections: { $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][2]$a$87 [6:3] $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][2]$a$87 [1:0] } = 6'000000
    Consolidated identical input bits for $mux cell $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][3][3]$101:
      Old ports: A=7'0100000, B=7'0001111, Y=$memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][1]$b$85
      New ports: A=2'10, B=2'01, Y={ $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][1]$b$85 [5] $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][1]$b$85 [0] }
      New connections: { $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][1]$b$85 [6] $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][1]$b$85 [4:1] } = { 2'00 $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][1]$b$85 [0] $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][1]$b$85 [0] $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][1]$b$85 [0] }
    Consolidated identical input bits for $mux cell $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][3][2]$98:
      Old ports: A=7'1001100, B=7'0100100, Y=$memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][1]$a$84
      New ports: A=2'01, B=2'10, Y={ $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][1]$a$84 [5] $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][1]$a$84 [3] }
      New connections: { $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][1]$a$84 [6] $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][1]$a$84 [4] $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][1]$a$84 [2:0] } = { $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][1]$a$84 [3] 4'0100 }
    Consolidated identical input bits for $mux cell $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][3][1]$95:
      Old ports: A=7'0010010, B=7'0000110, Y=$memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][0]$b$82
      New ports: A=2'10, B=2'01, Y={ $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][0]$b$82 [4] $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][0]$b$82 [2] }
      New connections: { $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][0]$b$82 [6:5] $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][0]$b$82 [3] $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][0]$b$82 [1:0] } = 5'00010
    Consolidated identical input bits for $mux cell $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][3][0]$92:
      Old ports: A=7'0000001, B=7'1001111, Y=$memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][0]$a$81
      New ports: A=1'0, B=1'1, Y=$memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][0]$a$81 [1]
      New connections: { $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][0]$a$81 [6:2] $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][0]$a$81 [0] } = { $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][0]$a$81 [1] 2'00 $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][0]$a$81 [1] $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][0]$a$81 [1] 1'1 }
    Consolidated identical input bits for $mux cell $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][3][6]$65:
      Old ports: A=7'0110001, B=7'1000010, Y=$memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][3]$a$45
      New ports: A=2'01, B=2'10, Y=$memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][3]$a$45 [1:0]
      New connections: $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][3]$a$45 [6:2] = { $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][3]$a$45 [1:0] $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][3]$a$45 [0] 2'00 }
    Consolidated identical input bits for $mux cell $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][3][5]$62:
      Old ports: A=7'0001000, B=7'1100000, Y=$memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][2]$b$43
      New ports: A=2'01, B=2'10, Y={ $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][2]$b$43 [5] $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][2]$b$43 [3] }
      New connections: { $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][2]$b$43 [6] $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][2]$b$43 [4] $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][2]$b$43 [2:0] } = { $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][2]$b$43 [5] 4'0000 }
    Consolidated identical input bits for $mux cell $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][3][4]$59:
      Old ports: A=7'0000000, B=7'0000100, Y=$memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][2]$a$42
      New ports: A=1'0, B=1'1, Y=$memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][2]$a$42 [2]
      New connections: { $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][2]$a$42 [6:3] $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][2]$a$42 [1:0] } = 6'000000
    Consolidated identical input bits for $mux cell $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][3][3]$56:
      Old ports: A=7'0100000, B=7'0001111, Y=$memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][1]$b$40
      New ports: A=2'10, B=2'01, Y={ $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][1]$b$40 [5] $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][1]$b$40 [0] }
      New connections: { $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][1]$b$40 [6] $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][1]$b$40 [4:1] } = { 2'00 $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][1]$b$40 [0] $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][1]$b$40 [0] $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][1]$b$40 [0] }
    Consolidated identical input bits for $mux cell $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][3][2]$53:
      Old ports: A=7'1001100, B=7'0100100, Y=$memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][1]$a$39
      New ports: A=2'01, B=2'10, Y={ $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][1]$a$39 [5] $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][1]$a$39 [3] }
      New connections: { $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][1]$a$39 [6] $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][1]$a$39 [4] $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][1]$a$39 [2:0] } = { $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][1]$a$39 [3] 4'0100 }
    Consolidated identical input bits for $mux cell $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][3][1]$50:
      Old ports: A=7'0010010, B=7'0000110, Y=$memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][0]$b$37
      New ports: A=2'10, B=2'01, Y={ $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][0]$b$37 [4] $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][0]$b$37 [2] }
      New connections: { $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][0]$b$37 [6:5] $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][0]$b$37 [3] $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][0]$b$37 [1:0] } = 5'00010
    Consolidated identical input bits for $mux cell $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][3][0]$47:
      Old ports: A=7'0000001, B=7'1001111, Y=$memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][0]$a$36
      New ports: A=1'0, B=1'1, Y=$memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][0]$a$36 [1]
      New connections: { $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][0]$a$36 [6:2] $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][0]$a$36 [0] } = { $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][0]$a$36 [1] 2'00 $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][0]$a$36 [1] $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][0]$a$36 [1] 1'1 }
    Consolidated identical input bits for $mux cell $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][3][7]$68:
      Old ports: A=7'0110000, B=7'0111000, Y=$memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][3]$b$46
      New ports: A=1'0, B=1'1, Y=$memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][3]$b$46 [3]
      New connections: { $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][3]$b$46 [6:4] $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][3]$b$46 [2:0] } = 6'011000
    Consolidated identical input bits for $mux cell $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][3][7]$113:
      Old ports: A=7'0110000, B=7'0111000, Y=$memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][3]$b$91
      New ports: A=1'0, B=1'1, Y=$memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][3]$b$91 [3]
      New connections: { $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][3]$b$91 [6:4] $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][3]$b$91 [2:0] } = 6'011000
  Optimizing cells in module \top.
    Consolidated identical input bits for $mux cell $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][3]$89:
      Old ports: A=$memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][3]$a$90, B=$memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][3]$b$91, Y=$memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][1][1]$b$79
      New ports: A={ $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][3]$a$90 [0] 1'0 $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][3]$a$90 [1:0] }, B={ 1'1 $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][3]$b$91 [3] 2'00 }, Y={ $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][1][1]$b$79 [4:3] $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][1][1]$b$79 [1:0] }
      New connections: { $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][1][1]$b$79 [6:5] $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][1][1]$b$79 [2] } = { $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][1][1]$b$79 [1] $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][1][1]$b$79 [4] 1'0 }
    Consolidated identical input bits for $mux cell $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][2]$86:
      Old ports: A=$memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][2]$a$87, B=$memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][2]$b$88, Y=$memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][1][1]$a$78
      New ports: A={ 2'00 $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][2]$a$87 [2] }, B={ $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][2]$b$88 [5] $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][2]$b$88 [3] 1'0 }, Y={ $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][1][1]$a$78 [5] $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][1][1]$a$78 [3:2] }
      New connections: { $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][1][1]$a$78 [6] $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][1][1]$a$78 [4] $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][1][1]$a$78 [1:0] } = { $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][1][1]$a$78 [5] 3'000 }
    Consolidated identical input bits for $mux cell $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][1]$83:
      Old ports: A=$memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][1]$a$84, B=$memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][1]$b$85, Y=$memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][1][0]$b$76
      New ports: A={ $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][1]$a$84 [3] $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][1]$a$84 [5] $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][1]$a$84 [3] 2'10 }, B={ 1'0 $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][1]$b$85 [5] $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][1]$b$85 [0] $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][1]$b$85 [0] $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][1]$b$85 [0] }, Y={ $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][1][0]$b$76 [6:5] $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][1][0]$b$76 [3:2] $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][1][0]$b$76 [0] }
      New connections: { $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][1][0]$b$76 [4] $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][1][0]$b$76 [1] } = { 1'0 $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][1][0]$b$76 [0] }
    Consolidated identical input bits for $mux cell $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][0]$80:
      Old ports: A=$memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][0]$a$81, B=$memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][0]$b$82, Y=$memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][1][0]$a$75
      New ports: A={ 1'0 $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][0]$a$81 [1] $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][0]$a$81 [1] $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][0]$a$81 [1] 1'1 }, B={ $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][0]$b$82 [4] 1'0 $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][2][0]$b$82 [2] 2'10 }, Y=$memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][1][0]$a$75 [4:0]
      New connections: $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][1][0]$a$75 [6:5] = { $memory$auto$proc_rom.cc:155:do_switch$8$rdmux[0][1][0]$a$75 [3] 1'0 }
    Consolidated identical input bits for $mux cell $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][3]$44:
      Old ports: A=$memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][3]$a$45, B=$memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][3]$b$46, Y=$memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][1][1]$b$34
      New ports: A={ $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][3]$a$45 [0] 1'0 $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][3]$a$45 [1:0] }, B={ 1'1 $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][3]$b$46 [3] 2'00 }, Y={ $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][1][1]$b$34 [4:3] $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][1][1]$b$34 [1:0] }
      New connections: { $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][1][1]$b$34 [6:5] $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][1][1]$b$34 [2] } = { $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][1][1]$b$34 [1] $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][1][1]$b$34 [4] 1'0 }
    Consolidated identical input bits for $mux cell $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][2]$41:
      Old ports: A=$memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][2]$a$42, B=$memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][2]$b$43, Y=$memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][1][1]$a$33
      New ports: A={ 2'00 $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][2]$a$42 [2] }, B={ $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][2]$b$43 [5] $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][2]$b$43 [3] 1'0 }, Y={ $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][1][1]$a$33 [5] $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][1][1]$a$33 [3:2] }
      New connections: { $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][1][1]$a$33 [6] $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][1][1]$a$33 [4] $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][1][1]$a$33 [1:0] } = { $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][1][1]$a$33 [5] 3'000 }
    Consolidated identical input bits for $mux cell $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][1]$38:
      Old ports: A=$memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][1]$a$39, B=$memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][1]$b$40, Y=$memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][1][0]$b$31
      New ports: A={ $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][1]$a$39 [3] $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][1]$a$39 [5] $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][1]$a$39 [3] 2'10 }, B={ 1'0 $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][1]$b$40 [5] $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][1]$b$40 [0] $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][1]$b$40 [0] $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][1]$b$40 [0] }, Y={ $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][1][0]$b$31 [6:5] $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][1][0]$b$31 [3:2] $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][1][0]$b$31 [0] }
      New connections: { $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][1][0]$b$31 [4] $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][1][0]$b$31 [1] } = { 1'0 $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][1][0]$b$31 [0] }
    Consolidated identical input bits for $mux cell $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][0]$35:
      Old ports: A=$memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][0]$a$36, B=$memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][0]$b$37, Y=$memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][1][0]$a$30
      New ports: A={ 1'0 $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][0]$a$36 [1] $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][0]$a$36 [1] $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][0]$a$36 [1] 1'1 }, B={ $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][0]$b$37 [4] 1'0 $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][2][0]$b$37 [2] 2'10 }, Y=$memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][1][0]$a$30 [4:0]
      New connections: $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][1][0]$a$30 [6:5] = { $memory$auto$proc_rom.cc:155:do_switch$12$rdmux[0][1][0]$a$30 [3] 1'0 }
  Optimizing cells in module \top.
Performed a total of 24 changes.

4.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~30 debug messages>
Removed a total of 10 cells.

4.19.6. Executing OPT_SHARE pass.

4.19.7. Executing OPT_DFF pass (perform DFF optimizations).

4.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 42 unused wires.
<suppressed ~1 debug messages>

4.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~2 debug messages>

4.19.10. Rerunning OPT passes. (Maybe there is more to do..)

4.19.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

4.19.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

4.19.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

4.19.14. Executing OPT_SHARE pass.

4.19.15. Executing OPT_DFF pass (perform DFF optimizations).

4.19.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

4.19.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

4.19.18. Rerunning OPT passes. (Maybe there is more to do..)

4.19.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

4.19.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

4.19.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

4.19.22. Executing OPT_SHARE pass.

4.19.23. Executing OPT_DFF pass (perform DFF optimizations).

4.19.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

4.19.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

4.19.26. Finished OPT passes. (There is nothing left to do.)

4.20. Executing TECHMAP pass (map to technology primitives).

4.20.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $adff.
No more expansions possible.
<suppressed ~96 debug messages>

4.21. Executing OPT pass (performing simple optimizations).

4.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~6 debug messages>

4.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~42 debug messages>
Removed a total of 14 cells.

4.21.3. Executing OPT_DFF pass (perform DFF optimizations).

4.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

4.21.5. Finished fast OPT passes.

4.22. Executing ABC pass (technology mapping using ABC).

4.22.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 67 gates and 77 wires to a netlist network with 8 inputs and 15 outputs.

4.22.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.22.1.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        6
ABC RESULTS:               AND cells:        2
ABC RESULTS:               NOR cells:        2
ABC RESULTS:                OR cells:        2
ABC RESULTS:             ORNOT cells:        4
ABC RESULTS:            ANDNOT cells:       18
ABC RESULTS:               MUX cells:       30
ABC RESULTS:              XNOR cells:        5
ABC RESULTS:               XOR cells:        2
ABC RESULTS:        internal signals:       54
ABC RESULTS:           input signals:        8
ABC RESULTS:          output signals:       15
Removing temp directory.

4.23. Executing OPT pass (performing simple optimizations).

4.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~22 debug messages>

4.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

4.23.3. Executing OPT_DFF pass (perform DFF optimizations).

4.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 2 unused cells and 43 unused wires.
<suppressed ~3 debug messages>

4.23.5. Finished fast OPT passes.

4.24. Executing HIERARCHY pass (managing design hierarchy).

4.24.1. Analyzing design hierarchy..
Top module:  \top

4.24.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

4.25. Printing statistics.

=== top ===

   Number of wires:                 57
   Number of wire bits:             76
   Number of public wires:           6
   Number of public wire bits:      25
   Number of ports:                  5
   Number of port bits:             24
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 74
     $_ANDNOT_                      16
     $_AND_                          2
     $_DFFE_PN_                      1
     $_DFF_PP0_                      7
     $_DFF_PP1_                      1
     $_MUX_                         30
     $_NOR_                          2
     $_NOT_                          4
     $_ORNOT_                        4
     $_OR_                           2
     $_XNOR_                         3
     $_XOR_                          2

4.26. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

5.6. Executing OPT_DFF pass (perform DFF optimizations).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

5.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

5.9. Finished OPT passes. (There is nothing left to do.)

6. Executing TECHMAP pass (map to technology primitives).

6.1. Executing Verilog-2005 frontend: /home/jinghanhui/yosys-sta/scripts/../nangate45/verilog/cells_latch.v
Parsing Verilog input from `/home/jinghanhui/yosys-sta/scripts/../nangate45/verilog/cells_latch.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

6.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

7. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  cell DFF_X1 (noninv, pins=4, area=4.52) is a direct match for cell type $_DFF_P_.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  cell DFFR_X1 (noninv, pins=5, area=5.32) is a direct match for cell type $_DFF_PN0_.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  cell DFFS_X1 (noninv, pins=5, area=5.32) is a direct match for cell type $_DFF_PN1_.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  cell DFFRS_X1 (noninv, pins=6, area=6.38) is a direct match for cell type $_DFFSR_PNN_.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \DFF_X1 _DFF_P_ (.CK( C), .D( D), .Q( Q), .QN(~Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \DFFR_X1 _DFF_PN0_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN( R));
    \DFFS_X1 _DFF_PN1_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .SN( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    unmapped dff cell: $_DFFSR_NNN_
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    \DFFRS_X1 _DFFSR_PNN_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN( R), .SN( S));
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

7.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\top':
  mapped 7 $_DFF_PN0_ cells to \DFFR_X1 cells.
  mapped 1 $_DFF_PN1_ cells to \DFFS_X1 cells.
  mapped 1 $_DFF_P_ cells to \DFF_X1 cells.

8. Executing OPT pass (performing simple optimizations).

8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~21 debug messages>
Removed a total of 7 cells.

8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

8.6. Executing OPT_DFF pass (perform DFF optimizations).

8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 4 unused cells and 15 unused wires.
<suppressed ~5 debug messages>

8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

8.9. Rerunning OPT passes. (Maybe there is more to do..)

8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

8.13. Executing OPT_DFF pass (perform DFF optimizations).

8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

8.16. Finished OPT passes. (There is nothing left to do.)

9. Executing ABC pass (technology mapping using ABC).

9.1. Extracting gate netlist of module `\top' to `/tmp/yosys-abc-5BabQ1/input.blif'..
Extracted 63 gates and 77 wires to a netlist network with 14 inputs and 16 outputs.

9.1.1. Executing ABC.
Running ABC command: "/usr/local/bin/yosys-abc" -s -f /tmp/yosys-abc-5BabQ1/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-5BabQ1/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-5BabQ1/input.blif 
ABC: + read_lib -w /home/jinghanhui/yosys-sta/scripts/../nangate45/lib/merged.lib 
ABC: Parsing finished successfully.  Parsing time =     0.03 sec
ABC: Scl_LibertyReadGenlib() skipped cell "fakeram45_1024x32" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "fakeram45_2048x39" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "fakeram45_256x34" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "fakeram45_256x95" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "fakeram45_256x96" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "fakeram45_32x64" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "fakeram45_512x64" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "fakeram45_64x15" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "fakeram45_64x21" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "fakeram45_64x32" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "fakeram45_64x7" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "fakeram45_64x96" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "ANTENNA_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X2".
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X4" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X8" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X32" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC0_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC1_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X16".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TINV_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "TLAT_X1".
ABC: Library "nangate45_merged" from "/home/jinghanhui/yosys-sta/scripts/../nangate45/lib/merged.lib" has 88 cells (47 skipped: 21 seq; 6 tri-state; 20 no func; 7 dont_use).  Time =     0.05 sec
ABC: Memory =   11.42 MB. Time =     0.05 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FA_X1").
ABC: + strash 
ABC: + ifraig 
ABC: + retime -D -D 2000.0 -M 6 
ABC: + strash 
ABC: + dch -f 
ABC: + map -p -M 1 -D 2000.0 -f 
ABC: + topo 
ABC: + dnsize 
ABC: + buffer -p 
ABC: + upsize 
ABC: + 
ABC: + write_blif /tmp/yosys-abc-5BabQ1/output.blif 

9.1.2. Re-integrating ABC results.
ABC RESULTS:          NAND2_X1 cells:        1
ABC RESULTS:          OAI22_X1 cells:        1
ABC RESULTS:            OR4_X4 cells:        2
ABC RESULTS:           AND2_X1 cells:        4
ABC RESULTS:          NAND4_X1 cells:        4
ABC RESULTS:           NOR2_X1 cells:        4
ABC RESULTS:          NAND3_X1 cells:        2
ABC RESULTS:           NOR3_X1 cells:        2
ABC RESULTS:            OR2_X1 cells:        2
ABC RESULTS:         OAI211_X2 cells:        3
ABC RESULTS:            OR3_X2 cells:        1
ABC RESULTS:           MUX2_X1 cells:        2
ABC RESULTS:          OAI21_X1 cells:       10
ABC RESULTS:           AND3_X1 cells:        2
ABC RESULTS:          AOI21_X1 cells:        7
ABC RESULTS:          AOI22_X1 cells:        4
ABC RESULTS:            INV_X1 cells:       12
ABC RESULTS:          XNOR2_X2 cells:        2
ABC RESULTS:          XNOR2_X1 cells:        1
ABC RESULTS:           MUX2_X2 cells:        1
ABC RESULTS:        internal signals:       47
ABC RESULTS:           input signals:       14
ABC RESULTS:          output signals:       16
Removing temp directory.

10. Executing HILOMAP pass (mapping to constant drivers).

11. Executing SETUNDEF pass (replace undef values with defined constants).

12. Executing SPLITNETS pass (splitting up multi-bit signals).

13. Executing INSBUF pass (insert buffer cells for connected wires).
Add top/$auto$insbuf.cc:97:execute$460: \out [1] -> $abc$392$out[1]
Add top/$auto$insbuf.cc:97:execute$461: \out [0] -> $abc$392$out[0]
Add top/$auto$insbuf.cc:97:execute$462: $abc$289$new_n25 -> $abc$392$abc$289$new_n25
Add top/$auto$insbuf.cc:97:execute$463: \out [2] -> $abc$392$out[2]
Add top/$auto$insbuf.cc:97:execute$464: $abc$289$new_n26 -> $abc$392$abc$289$new_n26
Add top/$auto$insbuf.cc:97:execute$465: \out [3] -> $abc$392$out[3]
Add top/$auto$insbuf.cc:97:execute$466: $abc$392$hex_low[0] -> \hex_low [0]
Add top/$auto$insbuf.cc:97:execute$467: $abc$392$hex_low[1] -> \hex_low [1]
Add top/$auto$insbuf.cc:97:execute$468: $abc$392$hex_low[2] -> \hex_low [2]
Add top/$auto$insbuf.cc:97:execute$469: $abc$392$hex_low[3] -> \hex_low [3]
Add top/$auto$insbuf.cc:97:execute$470: $abc$392$hex_low[4] -> \hex_low [4]
Add top/$auto$insbuf.cc:97:execute$471: $abc$392$hex_low[5] -> \hex_low [5]
Add top/$auto$insbuf.cc:97:execute$472: $abc$392$hex_low[6] -> \hex_low [6]
Add top/$auto$insbuf.cc:97:execute$473: \out [5] -> $abc$392$out[5]
Add top/$auto$insbuf.cc:97:execute$474: \out [4] -> $abc$392$out[4]
Add top/$auto$insbuf.cc:97:execute$475: $abc$289$new_n60 -> $abc$392$abc$289$new_n60
Add top/$auto$insbuf.cc:97:execute$476: \out [6] -> $abc$392$out[6]
Add top/$auto$insbuf.cc:97:execute$477: $abc$289$new_n59 -> $abc$392$abc$289$new_n59
Add top/$auto$insbuf.cc:97:execute$478: \out [7] -> $abc$392$out[7]
Add top/$auto$insbuf.cc:97:execute$479: $abc$392$hex_high[0] -> \hex_high [0]
Add top/$auto$insbuf.cc:97:execute$480: $abc$392$hex_high[1] -> \hex_high [1]
Add top/$auto$insbuf.cc:97:execute$481: $abc$392$hex_high[2] -> \hex_high [2]
Add top/$auto$insbuf.cc:97:execute$482: $abc$392$hex_high[3] -> \hex_high [3]
Add top/$auto$insbuf.cc:97:execute$483: $abc$392$hex_high[4] -> \hex_high [4]
Add top/$auto$insbuf.cc:97:execute$484: $abc$392$hex_high[5] -> \hex_high [5]
Add top/$auto$insbuf.cc:97:execute$485: $abc$392$hex_high[6] -> \hex_high [6]
Add top/$auto$insbuf.cc:97:execute$486: \reset -> $abc$392$reset
Add top/$auto$insbuf.cc:97:execute$487: $abc$392$auto$rtlil.cc:2705:NotGate$364 -> $auto$rtlil.cc:2705:NotGate$364
Add top/$auto$insbuf.cc:97:execute$488: \x8 -> $abc$392$x8
Add top/$auto$insbuf.cc:97:execute$489: $abc$392$auto$rtlil.cc:2714:MuxGate$362 -> $auto$rtlil.cc:2714:MuxGate$362

14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 47 unused wires.
<suppressed ~1 debug messages>

15. Executing CHECK pass (checking for obvious problems).
Checking module top...
Warning: Wire top.\out [7] is used but has no driver.
Warning: Wire top.\out [6] is used but has no driver.
Warning: Wire top.\out [5] is used but has no driver.
Warning: Wire top.\out [4] is used but has no driver.
Warning: Wire top.\out [3] is used but has no driver.
Warning: Wire top.\out [2] is used but has no driver.
Warning: Wire top.\out [1] is used but has no driver.
Warning: Wire top.\out [0] is used but has no driver.
Warning: Wire top.\hex_low [6] is used but has no driver.
Warning: Wire top.\hex_low [5] is used but has no driver.
Warning: Wire top.\hex_low [4] is used but has no driver.
Warning: Wire top.\hex_low [3] is used but has no driver.
Warning: Wire top.\hex_low [2] is used but has no driver.
Warning: Wire top.\hex_low [1] is used but has no driver.
Warning: Wire top.\hex_low [0] is used but has no driver.
Warning: Wire top.\hex_high [6] is used but has no driver.
Warning: Wire top.\hex_high [5] is used but has no driver.
Warning: Wire top.\hex_high [4] is used but has no driver.
Warning: Wire top.\hex_high [3] is used but has no driver.
Warning: Wire top.\hex_high [2] is used but has no driver.
Warning: Wire top.\hex_high [1] is used but has no driver.
Warning: Wire top.\hex_high [0] is used but has no driver.
Found and reported 22 problems.

16. Printing statistics.

=== top ===

   Number of wires:                 98
   Number of wire bits:            117
   Number of public wires:           6
   Number of public wire bits:      25
   Number of ports:                  5
   Number of port bits:             24
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                106
     AND2_X1                         4
     AND3_X1                         2
     AOI21_X1                        7
     AOI22_X1                        4
     BUF_X1                         30
     DFFR_X1                         7
     DFFS_X1                         1
     DFF_X1                          1
     INV_X1                         12
     MUX2_X1                         2
     MUX2_X2                         1
     NAND2_X1                        1
     NAND3_X1                        2
     NAND4_X1                        4
     NOR2_X1                         4
     NOR3_X1                         2
     OAI211_X2                       3
     OAI21_X1                       10
     OAI22_X1                        1
     OR2_X1                          2
     OR3_X2                          1
     OR4_X4                          2
     XNOR2_X1                        1
     XNOR2_X2                        2

   Chip area for module '\top': 153.482000
     of which used for sequential elements: 47.082000 (30.68%)

17. Executing Verilog backend.
Dumping module `\top'.

Warnings: 30 unique messages, 94 total
End of script. Logfile hash: 4a8c084b85, CPU: user 0.16s system 0.01s, MEM: 33.75 MB peak
Yosys 0.44+20 (git sha1 5fb3c0b1d, clang++ 14.0.0-1ubuntu1.1 -fPIC -O3)
Time spent: 47% 2x abc (0 sec), 17% 1x dfflibmap (0 sec), ...
